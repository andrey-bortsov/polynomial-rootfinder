import java.util.Scanner;

/**
* The PolynomialUI class provides user interface for the Polynomial object.
* Prompts the user to enter polynomial coefficients, prints the polynomial, 
* prompts for the range and number of intervals, computes the table of 
* values and differences, and determines if there are any roots at or 
* between table entries. Prompts to recompute the table with new boundaries
* and intervals.
* 
* @author Andrey Bortsov
*/
public class PolynomialUI {
    
	/** Initialize the Polynomial object*/
	Polynomial p;
	/** Variable to store lower bound entered by user*/
	double lowerBound;
	/** Variable to store upper bound entered by user*/
	double upperBound;
	/** Variable to store n of intervals entered by user*/
	int nIntervals;

	/**
	* Main method to start the program
	*/	
	public static void main(String[] args) {
		PolynomialUI pui = new PolynomialUI();
		pui.runPolynomial();
	}

	/**
	* The PolynomialUI object constructor, creates and initializes the Polynomial object
	*/		
	public PolynomialUI() {
		p = new Polynomial();
	}

	/**
	* Controls the flow of the program. See the PolynomialUI class description for
	* program overview.
	*/	
	public void runPolynomial() {
		setPolynomial();
		printPolynomial();
		setRange();
		printTable();
		System.out.println();
		System.out.println("Do you want to redefine your table? (Y/N)");
		Scanner newTablePrompt = new Scanner(System.in);
		String newTable = newTablePrompt.next().toLowerCase();
		while (newTable.equals("y")) {
			setRange();
			printTable();
			System.out.println();
			System.out.println("Do you want to redefine your table? (Y/N)");
			newTable = newTablePrompt.next().toLowerCase();
		}
	}

	
	/**
	* Prompts the user to enter polynomial coefficients in increasing powers,
	* starting from 0 and up to maximum 9 (change MAXPOWER constant in Polynomial 
	* class if need more). If enter more than 10 coefficients, the input is ignored.
	* If enter non-numeric input, then reprompt. Input is stopped by entering
	* empty line.
	*/	
	public void setPolynomial() {
		System.out.println("Type in the polynomials in increasing powers:");
		Scanner console = new Scanner(System.in); //use this scanner for console input
		double coefficient;
		String line = "Dummy"; // use this variable to store console input as string,
		                       // initialize at arbitrary non-empty value
	
		do {
			line = console.nextLine();
			Scanner scanString = new Scanner(line); //use this scanner to parse the string	
			if (scanString.hasNextDouble()) {
				coefficient = scanString.nextDouble();
				p.addCoefficient(coefficient);
			} else {
				if (!(line.isEmpty())) {
				    System.out.println("Invalid input, please try again.");
				}
			}
		} while (!(line.isEmpty()));
	}
			
	
	/**
	* Prints polynomial using the string generated by toString() method
	*/	
	public void printPolynomial() {
		if (p.toString() != "") {
			System.out.println(p.toString());
		} else {
			System.out.println("All coefficients are zero!");
		}
	}

	/**
	* Prompts the user for lower bound, upper bound and number of intervals to compute the table.
	* Reprompts if input is not a number, if lower bound >= upper bound, or if number of intervals
	* is not a positive integer.
	*/
	public void setRange() {
		lowerBound = 0; //initialize bounds and nIntervals at zero
		upperBound = 0;
		nIntervals = 0;
		
		Scanner console = new Scanner(System.in);
		
		// Prompt for bounds
		do {
			System.out.println("Type in the range:");
			System.out.print("Lower Bound (double): ");
			
			while(!console.hasNextDouble()){
				console.nextLine();
				System.out.println("Invalid input");
				System.out.print("Lower Bound (double): ");
			}
			lowerBound = console.nextDouble();
			console.nextLine();
				
			System.out.print("Upper Bound (double): ");
			while(!console.hasNextDouble()){
				console.nextLine();
				System.out.println("Invalid input");
				System.out.print("Upper Bound (double): ");
			}
			upperBound = console.nextDouble();
			console.nextLine();
			
			if (lowerBound >= upperBound) {
				System.out.println("Invalid bounds");
			}
		} while (lowerBound >= upperBound); //reprompt if lower bound >= upper bound

		// Prompt for number of intervals
		System.out.print("Number Of Intervals (int): ");
		double nIntervalsAsDouble = 0; //need supplementary double variable to read ANY numeric value from console
		while (!(console.hasNextInt()) || ((nIntervalsAsDouble = console.nextDouble()) <= 0)) {
			console.nextLine();
			System.out.println("Invalid input");
			System.out.print("Number Of Intervals (int): ");
		}
		nIntervals = (int) nIntervalsAsDouble;
	}
	
	/**
	* Prints the table of x values, polynomial values, polynomial value increment.
	* Uses lower and upper bounds and the number of intervals to compute each x value,
	* then uses getValue() method to compute polynomial value,
	* then uses  findRoot() method to evaluate the roots.
	* Prints the appropriate message if root is found.
	*/
	public void printTable() {

		double index0; // value to compute polynomial at i-1 position in table 
		double index1; // value to compute polynomial at i position in table
		double index2; // value to compute polynomial at i+1 position in table
		double pIndex0; // polynomial value at i-1 position in table 
		double pIndex1; // polynomial value at i position in table
		double pIndex2; // polynomial value at i+1 position in table
		double diff; // difference between current and previous polynomial value
		int rootBuffer1 = -9; // retain previous root code value (initialize at a value out of root code range)
		int rootBuffer2 = -9; // retain pre-previous root code value (initialize at a value out of root code range)
		double delta = (upperBound - lowerBound)/nIntervals; // table x value step
		
		System.out.println();
		System.out.println("    index  p(index)  diff(index)"); //table header
		for (int i=0; i <= nIntervals; i++) {
			index0 = lowerBound + (i-1)*delta;
			index1 = lowerBound + i*delta;     
			index2 = lowerBound + (i+1)*delta;
			pIndex0 = p.getValue(index0);
			pIndex1 = p.getValue(index1);
			pIndex2 = p.getValue(index2);
			diff = pIndex1 - pIndex0;
			System.out.printf("%9.3f %9.3f %9.3f",index1, pIndex1, diff);
			System.out.println();
			int root = p.findRoot(pIndex1, pIndex2);
			
			if (root == 2 && i == nIntervals) {
				root = -1; // modify value of root code variable if end of table
			}
			
			if ((root == -1 && rootBuffer1 != 2) || 
				(root == -1 && rootBuffer1 == 2 && rootBuffer2 == 2)) {
				System.out.printf("Root found at %.3f", index1);
				System.out.println();
			} else if (root == 0 && i!=nIntervals) {
				System.out.printf("Root found between %.3f and %.3f", index1, index2);
				System.out.println();
			} else if (root == 2 && rootBuffer1 != 2) {
				System.out.printf("Root found at %.3f and %.3f", index1, index2);
				System.out.println();
			} else {
			}
			rootBuffer2 = rootBuffer1; // save two previous values of root code
			rootBuffer1 = root; 
		}
	}
}
